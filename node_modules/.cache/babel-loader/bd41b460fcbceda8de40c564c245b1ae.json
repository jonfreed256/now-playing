{"ast":null,"code":"import _defineProperty from \"/Users/jonathanfreed/Development/AccessLabs/NowShowing/now-showing-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/jonathanfreed/Development/AccessLabs/NowShowing/now-showing-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jonathanfreed/Development/AccessLabs/NowShowing/now-showing-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/jonathanfreed/Development/AccessLabs/NowShowing/now-showing-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/jonathanfreed/Development/AccessLabs/NowShowing/now-showing-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/jonathanfreed/Development/AccessLabs/NowShowing/now-showing-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/jonathanfreed/Development/AccessLabs/NowShowing/now-showing-client/src/Components/SelectedMovie.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { Header, Segment, Comment, Form, Button } from 'semantic-ui-react';\nimport Comments from './Comments';\nimport { persistComment } from '../Redux/Actions/commentAction';\n\nvar SelectedMovie =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(SelectedMovie, _Component);\n\n  function SelectedMovie() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, SelectedMovie);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SelectedMovie)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      addComment: \"\"\n    };\n\n    _this.handleChange = function (e) {\n      console.log(e.target.value);\n\n      _this.setState(_defineProperty({}, e.target.name, e.target.value));\n    };\n\n    _this.handleSubmit = function (e) {\n      e.preventDefault();\n      var comment = _this.state;\n      console.log('persistComment', getCurrentMovieBack);\n    };\n\n    _this.getMovieShowtimes = function () {\n      var movieShowtimes = {};\n\n      _this.props.selectedMovie.showtimes.forEach(function (theatre) {\n        if (movieShowtimes.hasOwnProperty([theatre.theatre.name])) {\n          movieShowtimes[theatre.theatre.name].push(theatre.dateTime);\n        } else {\n          movieShowtimes[theatre.theatre.name] = [theatre.dateTime];\n        }\n      });\n\n      return movieShowtimes;\n    };\n\n    _this.getCurrentMovieBack = function () {\n      currentMovieBack = backendMovies.filet(function (movie) {\n        return movie.title === _this.props.selectedMovie.title;\n      });\n      console.log(currentMovieBack);\n    };\n\n    return _this;\n  }\n\n  _createClass(SelectedMovie, [{\n    key: \"render\",\n    value: function render() {\n      // let posters = this.moviePosters();\n      var theatreShowtimes = this.getMovieShowtimes();\n      var times = [];\n\n      for (var key in theatreShowtimes) {\n        times.push(React.createElement(\"h3\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59\n          },\n          __self: this\n        }, key, \": \", theatreShowtimes[key].map(function (time) {\n          return new Date(time).toLocaleTimeString('en-US', {\n            hour: '2-digit',\n            minute: '2-digit'\n          });\n        }).join(', ')));\n      }\n\n      var addComment = this.state.addComment;\n      var _this$props = this.props,\n          allComments = _this$props.allComments,\n          selectedMovie = _this$props.selectedMovie,\n          backendMovies = _this$props.backendMovies;\n      var commentsArray = allComments.map(function (comment) {\n        return React.createElement(Comments, {\n          key: comment.id,\n          comment: comment,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67\n          },\n          __self: this\n        });\n      });\n      return React.createElement(Segment, {\n        id: \"selectedmovie\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, React.createElement(Header, {\n        size: \"huge\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, this.props.selectedMovie.title), React.createElement(Header, {\n        size: \"large\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, \"Directed by:\"), React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, this.props.selectedMovie.directors.join(', ')), React.createElement(Header, {\n        size: \"large\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, \"Starring:\"), React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, \" \", this.props.selectedMovie.topCast.join(', ')), React.createElement(Header, {\n        size: \"large\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, \"Synopsis:\"), React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, this.props.selectedMovie.longDescription), React.createElement(Header, {\n        size: \"large\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, \"Genre(s):\"), React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, this.props.selectedMovie.genres.join(', ')), React.createElement(Header, {\n        size: \"large\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, \"Now Showing at:\"), React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, times), React.createElement(Header, {\n        size: \"large\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, \"Have you seen \", this.props.selectedMovie.title, \"?\"), React.createElement(Comment.Group, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, commentsArray), React.createElement(Form, {\n        onSubmit: this.handleSubmit(currentMovieBack),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, React.createElement(Form.Input, {\n        label: \"Tell us about it!\",\n        type: \"text\",\n        placeholder: \"add comment\",\n        name: \"addComment\",\n        value: addComment,\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }), React.createElement(Button, {\n        content: \"Add Comment\",\n        labelPosition: \"left\",\n        icon: \"edit\",\n        color: \"purple\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return SelectedMovie;\n}(Component);\n\nvar mapState = function mapState(state) {\n  return {\n    loadedMovies: state.movieData.loadedMovies,\n    selectedMovie: state.movieData.selectedMovie,\n    backendMovies: state.movieData.backendMovies,\n    allComments: state.commentData.allComments\n  };\n};\n\nexport default withRouter(connect(mapState)(SelectedMovie));","map":{"version":3,"sources":["/Users/jonathanfreed/Development/AccessLabs/NowShowing/now-showing-client/src/Components/SelectedMovie.js"],"names":["React","Component","connect","withRouter","Header","Segment","Comment","Form","Button","Comments","persistComment","SelectedMovie","state","addComment","handleChange","e","console","log","target","value","setState","name","handleSubmit","preventDefault","comment","getCurrentMovieBack","getMovieShowtimes","movieShowtimes","props","selectedMovie","showtimes","forEach","theatre","hasOwnProperty","push","dateTime","currentMovieBack","backendMovies","filet","movie","title","theatreShowtimes","times","key","map","time","Date","toLocaleTimeString","hour","minute","join","allComments","commentsArray","id","directors","topCast","longDescription","genres","mapState","loadedMovies","movieData","commentData"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { Header, Segment, Comment, Form, Button } from 'semantic-ui-react';\nimport Comments from './Comments';\nimport { persistComment } from '../Redux/Actions/commentAction';\n\nclass SelectedMovie extends Component {\n\n  state = {\n    addComment: \"\"\n  }\n\n  handleChange = e => {\n    console.log(e.target.value)\n    this.setState({\n      [e.target.name]: e.target.value\n    })\n  };\n\n  handleSubmit = e => {\n    e.preventDefault()\n    let comment = this.state\n    console.log('persistComment', getCurrentMovieBack)\n  }\n\n  // movie poster for\n  // moviePosters = () => {\n  //   let posterObj = {};\n  //   this.props.nowPlaying.results.forEach(movie => {\n  //     posterObj[movie.title] = `http://image.tmdb.org/t/p/w185/${movie.poster_path}`\n  //   });\n  //   return posterObj\n  // };\n\n  getMovieShowtimes = () => {\n    let movieShowtimes = {};\n    this.props.selectedMovie.showtimes.forEach(theatre => {\n      if(movieShowtimes.hasOwnProperty([theatre.theatre.name])){\n      movieShowtimes[theatre.theatre.name].push(theatre.dateTime)\n      } else {\n        movieShowtimes[theatre.theatre.name] = [theatre.dateTime]\n      }\n    });\n    return movieShowtimes\n  };\n\n  getCurrentMovieBack =() => {\n    currentMovieBack =  backendMovies.filet(movie => movie.title === this.props.selectedMovie.title)\n    console.log(currentMovieBack)\n  }\n\n  render(){\n    // let posters = this.moviePosters();\n    let theatreShowtimes = this.getMovieShowtimes();\n    let times = [];\n    for(let key in theatreShowtimes){\n      times.push(\n          <h3>\n           {key}: {theatreShowtimes[key].map(time => new Date(time).toLocaleTimeString('en-US', {hour: '2-digit', minute: '2-digit'})).join(', ')}\n          </h3>)\n    }\n\n    let { addComment } = this.state\n    let { allComments, selectedMovie, backendMovies } = this.props\n\n    let commentsArray = allComments.map(comment => <Comments key={comment.id} comment={comment}/>)\n\n    return(\n        <Segment id='selectedmovie'>\n          {/*<Image src={posters[movie.title.replace(\"3D\", \"\").trim()]} size='small' floated='right'/>*/}\n          <Header size='huge'>{this.props.selectedMovie.title}</Header>\n          <Header size='large'>Directed by:</Header>\n            <h3>{this.props.selectedMovie.directors.join(', ')}</h3>\n          <Header size='large'>Starring:</Header>\n            <h3> {this.props.selectedMovie.topCast.join(', ')}</h3>\n          <Header size='large'>Synopsis:</Header>\n            <h3>{this.props.selectedMovie.longDescription}</h3>\n          <Header size='large'>Genre(s):</Header>\n            <h3>{this.props.selectedMovie.genres.join(', ')}</h3>\n          <Header size='large'>Now Showing at:</Header>\n            <h3>{times}</h3>\n          <Header size='large'>Have you seen {this.props.selectedMovie.title}?</Header>\n          <Comment.Group>\n            {commentsArray}\n          </Comment.Group>\n          <Form onSubmit={this.handleSubmit(currentMovieBack)}>\n            <Form.Input label=\"Tell us about it!\" type=\"text\" placeholder=\"add comment\" name=\"addComment\" value={addComment} onChange={this.handleChange}/>\n            <Button content='Add Comment' labelPosition='left' icon='edit' color='purple'/>\n          </Form>\n        </Segment>\n    )\n  }\n}\n\nconst mapState = (state) => {\n  return {\n    loadedMovies: state.movieData.loadedMovies,\n    selectedMovie: state.movieData.selectedMovie,\n    backendMovies: state.movieData.backendMovies,\n    allComments: state.commentData.allComments\n  }\n};\n\nexport default withRouter(connect(mapState)(SelectedMovie));"]},"metadata":{},"sourceType":"module"}